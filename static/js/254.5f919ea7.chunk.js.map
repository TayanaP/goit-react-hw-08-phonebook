{"version":3,"file":"static/js/254.5f919ea7.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactsForm/ContactsForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.jsx","components/ContactsListItem/ContactsListItem.styled.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 50px;\n  width: 100%;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: 12px;\n  font-size: 16px;\n  font-weight: 500;\n  width: 190px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  padding: 4px 8px;\n  margin-top: 4px;\n  border-radius: 4px;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  font-weight: 600;\n  font-size: 12px;\n  margin-top: 24px;\n  padding: 12px 24px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.04);\n  border-radius: 9px;\n  border: 1px solid #efefef;\n  cursor: pointer;\n  background-color: #bfd0df;\n\n  :hover,\n  :focus {\n    color: #000000;\n    background-color: rgba(250, 187, 24, 0.1);\n    border: 1px solid #000000;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Notify } from 'notiflix';\nimport {\n  Form,\n  Label,\n  Input,\n  Button,\n} from 'components/ContactsForm/ContactsForm.styled';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n\n    const inContacts = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (inContacts) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number, id: nanoid() }))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(\n          `${originalPromiseResult.name} successfully added to contacts`\n        );\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setContactsFilter } from 'redux/contacts/filtersSlice';\nimport { Label, Input } from 'components/ContactsForm/ContactsForm.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = e => {\n    const normalizedValue = e.target.value.toLowerCase().trim();\n    dispatch(setContactsFilter(normalizedValue));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        title=\"Enter name or surname\"\n        required\n        onChange={handleChangeFilter}\n      />\n    </Label>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 6px;\n  width: 120px;\n\n  padding: 20px 20px;\n\n  border-radius: 24px;\n  border: 1px solid rgba(0, 0, 0, 0.04);\n\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.04);\n`;\n\nexport const ContactName = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n\n  margin: 0;\n  font-weight: 500;\n`;\n\nexport const ContactNumber = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n\n  margin: 0;\n`;\n\nexport const Button = styled.button`\n  font-weight: 600;\n  font-size: 12px;\n  margin-top: 24px;\n  padding: 12px 24px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 9px;\n  border: 1px solid #efefef;\n  cursor: pointer;\n  background-color: #bfd0df;\n\n  :hover,\n  :focus {\n    color: #000000;\n    background-color: rgba(250, 187, 24, 0.1);\n    border: 1px solid #000000;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix';\nimport {\n  ContactItem,\n  ContactName,\n  ContactNumber,\n  Button,\n} from 'components/ContactsListItem/ContactsListItem.styled';\n\nexport const ContactsListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = userId => {\n    dispatch(deleteContact(userId))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(\n          `${originalPromiseResult.name} successfully deleted from contacts`\n        );\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n  };\n\n  return (\n    <ContactItem key={id}>\n      <ContactName>{name}</ContactName>\n      <ContactNumber>{number}</ContactNumber>\n      <Button onClick={() => handleDeleteContact(id)}>Delete</Button>\n    </ContactItem>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  gap: 20px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectFilter, selectContacts } from 'redux/contacts/selectors';\nimport { ContactsListItem } from 'components/ContactsListItem/ContactsListItem';\nimport { ContactList } from 'components/ContactsList/ContactsList.styled';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ContactList>\n      {visibleContacts.map(({ name, number, id }) => (\n        <ContactsListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 38px 48px;\n  //   height: 100vh;\n  background-color: #e4eaef;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n  font-size: 26px;\n  text-align: center;\n\n  margin: 0;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactsForm/ContactsForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Container, Title } from 'pages/Contacts/Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {/* <Title>Phonebook</Title> */}\n      <ContactForm />\n      <Title>Contacts</Title>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","styled","Label","Input","Button","ContactForm","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","name","elements","value","number","some","contact","toLowerCase","alert","addContact","unwrap","then","originalPromiseResult","Notify","catch","reset","type","title","required","Filter","onChange","normalizedValue","trim","setContactsFilter","ContactItem","ContactName","ContactNumber","ContactsListItem","onClick","userId","deleteContact","ContactList","ContactsList","visibleContacts","includes","map","Container","Title","useEffect","fetchContacts"],"sourceRoot":""}